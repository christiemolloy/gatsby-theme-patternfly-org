const visit = require('unist-util-visit');
const mdxASTtoHAST = require('@mdx-js/mdx/mdx-ast-to-mdx-hast');
const { toJSX } = require('@mdx-js/mdx/mdx-hast-to-jsx');
const babel = require('@babel/core');
const { getId } = require('./getId');

/* https://github.com/mdx-js/specification
 *
 * Our goal is to take an AST and produce a string that looks
 * like whatever `body` looks like in gatsby-plugin-mdx.
 * 
 * Will this break with future versions of gatsby-plugin-mdx? Probably.
 * But for now, it wants some helpers and then `return mdx(...)`
 */
const renderMDXBody = exampleAST => {
  const jsx = toJSX(mdxASTtoHAST()(exampleAST));
  // This jsx has to be transformed to use mdx() calls
  return babel.transform(jsx, {
    plugins: [["@babel/plugin-transform-react-jsx", {
      pragma: "mdx"
    }]]
  }).code.replace('export default', 'return');
}

module.exports = {
  // Map example page urls to HTML
  extractExamples: (mdxAST, hbsInstance) => {
    const examples = {};

    visit(mdxAST, 'code', node => {
      const id = node.meta ? getId(node.meta.match(/title=(\S*)/)[1]) : 'no-id';
      if (node.lang === 'hbs') {
        const html = hbsInstance.compile(node.value)({});
        // Add rendered HTML to make fullscreen page from
        examples[id] = html;
      }
      else if (node.lang === 'js') {
        node.lang = 'jsx';
        // Add rendered MDX body to make fullscreen page from
        examples[id] = renderMDXBody({
          type: 'root',
          children: node
        });
      }
    });

    return examples;
  },
}

// TODO: Write some tests for example MDXAsts
console.log(module.exports.extractExamples({
  "type": "root",
  "children": [
    {
      "type": "import",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  NavVariants,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';",
      "position": {
        "start": {
          "line": 2,
          "column": 1,
          "offset": 1
        },
        "end": {
          "line": 39,
          "column": 41,
          "offset": 868
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "list",
      "ordered": false,
      "start": null,
      "spread": true,
      "children": [
        {
          "type": "listItem",
          "spread": true,
          "checked": null,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "All but the last example set the ",
                  "position": {
                    "start": {
                      "line": 41,
                      "column": 3,
                      "offset": 872
                    },
                    "end": {
                      "line": 41,
                      "column": 36,
                      "offset": 905
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "isManagedSidebar",
                  "position": {
                    "start": {
                      "line": 41,
                      "column": 36,
                      "offset": 905
                    },
                    "end": {
                      "line": 41,
                      "column": 54,
                      "offset": 923
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " prop on the Page component to have the sidebar automatically close for smaller screen widths. You can also manually control this behavior by not adding the ",
                  "position": {
                    "start": {
                      "line": 41,
                      "column": 54,
                      "offset": 923
                    },
                    "end": {
                      "line": 41,
                      "column": 211,
                      "offset": 1080
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "isManagedSidebar",
                  "position": {
                    "start": {
                      "line": 41,
                      "column": 211,
                      "offset": 1080
                    },
                    "end": {
                      "line": 41,
                      "column": 229,
                      "offset": 1098
                    },
                    "indent": []
                  }
                },
                {
                  "type": "text",
                  "value": " prop and instead:",
                  "position": {
                    "start": {
                      "line": 41,
                      "column": 229,
                      "offset": 1098
                    },
                    "end": {
                      "line": 41,
                      "column": 247,
                      "offset": 1116
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 41,
                  "column": 3,
                  "offset": 872
                },
                "end": {
                  "line": 41,
                  "column": 247,
                  "offset": 1116
                },
                "indent": []
              }
            },
            {
              "type": "list",
              "ordered": true,
              "start": 1,
              "spread": false,
              "children": [
                {
                  "type": "listItem",
                  "spread": false,
                  "checked": null,
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Add an onNavToggle callback to PageHeader",
                          "position": {
                            "start": {
                              "line": 43,
                              "column": 6,
                              "offset": 1123
                            },
                            "end": {
                              "line": 43,
                              "column": 47,
                              "offset": 1164
                            },
                            "indent": []
                          }
                        }
                      ],
                      "position": {
                        "start": {
                          "line": 43,
                          "column": 6,
                          "offset": 1123
                        },
                        "end": {
                          "line": 43,
                          "column": 47,
                          "offset": 1164
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 43,
                      "column": 3,
                      "offset": 1120
                    },
                    "end": {
                      "line": 43,
                      "column": 47,
                      "offset": 1164
                    },
                    "indent": []
                  }
                },
                {
                  "type": "listItem",
                  "spread": false,
                  "checked": null,
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Pass in a boolean into the isNavOpen prop to PageSidebar",
                          "position": {
                            "start": {
                              "line": 44,
                              "column": 6,
                              "offset": 1170
                            },
                            "end": {
                              "line": 44,
                              "column": 62,
                              "offset": 1226
                            },
                            "indent": []
                          }
                        }
                      ],
                      "position": {
                        "start": {
                          "line": 44,
                          "column": 6,
                          "offset": 1170
                        },
                        "end": {
                          "line": 44,
                          "column": 62,
                          "offset": 1226
                        },
                        "indent": []
                      }
                    }
                  ],
                  "position": {
                    "start": {
                      "line": 44,
                      "column": 3,
                      "offset": 1167
                    },
                    "end": {
                      "line": 44,
                      "column": 62,
                      "offset": 1226
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 43,
                  "column": 3,
                  "offset": 1120
                },
                "end": {
                  "line": 44,
                  "column": 62,
                  "offset": 1226
                },
                "indent": [
                  3
                ]
              }
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The last example demonstrates this.",
                  "position": {
                    "start": {
                      "line": 46,
                      "column": 3,
                      "offset": 1230
                    },
                    "end": {
                      "line": 46,
                      "column": 38,
                      "offset": 1265
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 46,
                  "column": 3,
                  "offset": 1230
                },
                "end": {
                  "line": 46,
                  "column": 38,
                  "offset": 1265
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 41,
              "column": 1,
              "offset": 870
            },
            "end": {
              "line": 47,
              "column": 1,
              "offset": 1266
            },
            "indent": [
              1,
              1,
              1,
              1,
              1,
              1
            ]
          }
        },
        {
          "type": "listItem",
          "spread": false,
          "checked": null,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "To make the page take up the full height, it is recommended to set the height of all ancestor elements up to the page component to ",
                  "position": {
                    "start": {
                      "line": 48,
                      "column": 3,
                      "offset": 1269
                    },
                    "end": {
                      "line": 48,
                      "column": 134,
                      "offset": 1400
                    },
                    "indent": []
                  }
                },
                {
                  "type": "inlineCode",
                  "value": "100%",
                  "position": {
                    "start": {
                      "line": 48,
                      "column": 134,
                      "offset": 1400
                    },
                    "end": {
                      "line": 48,
                      "column": 140,
                      "offset": 1406
                    },
                    "indent": []
                  }
                }
              ],
              "position": {
                "start": {
                  "line": 48,
                  "column": 3,
                  "offset": 1269
                },
                "end": {
                  "line": 48,
                  "column": 140,
                  "offset": 1406
                },
                "indent": []
              }
            }
          ],
          "position": {
            "start": {
              "line": 48,
              "column": 1,
              "offset": 1267
            },
            "end": {
              "line": 48,
              "column": 140,
              "offset": 1406
            },
            "indent": []
          }
        }
      ],
      "position": {
        "start": {
          "line": 41,
          "column": 1,
          "offset": 870
        },
        "end": {
          "line": 48,
          "column": 140,
          "offset": 1406
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Simple-nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  KebabToggle,\n  Nav,\n  NavGroup,\n  NavItem,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutSimpleNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId\n    });\n  };\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\" theme=\"dark\">\n        <NavList variant={NavVariants.simple}>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"simple-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"simple-example-uid-02\" aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        showNavToggle\n      />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} theme=\"dark\" />;\n    const pageId = 'main-content-page-layout-simple-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery gutter=\"md\">\n              {Array.apply(0, Array(10)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}",
      "position": {
        "start": {
          "line": 50,
          "column": 1,
          "offset": 1408
        },
        "end": {
          "line": 252,
          "column": 4,
          "offset": 7445
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Default-nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  KebabToggle,\n  Nav,\n  NavGroup,\n  NavItem,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutDefaultNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId\n    });\n  };\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\" theme=\"dark\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"default-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"default-example-uid-02\" aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        showNavToggle\n      />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} theme=\"dark\" />;\n    const pageId = 'main-content-page-layout-default-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section Home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section Title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section Title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section Landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          breadcrumb={PageBreadcrumb}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery gutter=\"md\">\n              {Array.apply(0, Array(10)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}",
      "position": {
        "start": {
          "line": 254,
          "column": 1,
          "offset": 7447
        },
        "end": {
          "line": 469,
          "column": 4,
          "offset": 13846
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Expandable-nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  KebabToggle,\n  Nav,\n  NavGroup,\n  NavItem,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutExpandableNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeGroup: 'grp-1',\n      activeItem: 'grp-1_itm-1'\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId,\n      activeGroup: result.groupId\n    });\n  };\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem, activeGroup } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\" theme=\"dark\">\n        <NavList>\n          <NavExpandable title=\"System Panel\" groupId=\"grp-1\" isActive={activeGroup === 'grp-1'} isExpanded>\n            <NavItem groupId=\"grp-1\" itemId=\"grp-1_itm-1\" isActive={activeItem === 'grp-1_itm-1'}>\n              Overview\n            </NavItem>\n            <NavItem groupId=\"grp-1\" itemId=\"grp-1_itm-2\" isActive={activeItem === 'grp-1_itm-2'}>\n              Resource Usage\n            </NavItem>\n            <NavItem groupId=\"grp-1\" itemId=\"grp-1_itm-3\" isActive={activeItem === 'grp-1_itm-3'}>\n              Hypervisors\n            </NavItem>\n            <NavItem groupId=\"grp-1\" itemId=\"grp-1_itm-4\" isActive={activeItem === 'grp-1_itm-4'}>\n              Instances\n            </NavItem>\n            <NavItem groupId=\"grp-1\" itemId=\"grp-1_itm-5\" isActive={activeItem === 'grp-1_itm-5'}>\n              Volumes\n            </NavItem>\n            <NavItem groupId=\"grp-1\" itemId=\"grp-1_itm-6\" isActive={activeItem === 'grp-1_itm-6'}>\n              Network\n            </NavItem>\n          </NavExpandable>\n          <NavExpandable title=\"Policy\" groupId=\"grp-2\" isActive={activeGroup === 'grp-2'}>\n            <NavItem groupId=\"grp-2\" itemId=\"grp-2_itm-1\" isActive={activeItem === 'grp-2_itm-1'}>\n              Subnav Link 1\n            </NavItem>\n            <NavItem groupId=\"grp-2\" itemId=\"grp-2_itm-2\" isActive={activeItem === 'grp-2_itm-2'}>\n              Subnav Link 2\n            </NavItem>\n          </NavExpandable>\n          <NavExpandable title=\"Authentication\" groupId=\"grp-3\" isActive={activeGroup === 'grp-3'}>\n            <NavItem groupId=\"grp-3\" itemId=\"grp-3_itm-1\" isActive={activeItem === 'grp-3_itm-1'}>\n              Subnav Link 1\n            </NavItem>\n            <NavItem groupId=\"grp-3\" itemId=\"grp-3_itm-2\" isActive={activeItem === 'grp-3_itm-2'}>\n              Subnav Link 2\n            </NavItem>\n          </NavExpandable>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"expanded-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"expanded-example-uid-02\" aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        showNavToggle\n      />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} theme=\"dark\" />;\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section Home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section Title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section Title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section Landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n    const pageId = 'main-content-page-layout-expandable-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          breadcrumb={PageBreadcrumb}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery gutter=\"md\">\n              {Array.apply(0, Array(10)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}",
      "position": {
        "start": {
          "line": 471,
          "column": 1,
          "offset": 13848
        },
        "end": {
          "line": 708,
          "column": 4,
          "offset": 21686
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Grouped-nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  KebabToggle,\n  Nav,\n  NavGroup,\n  NavItem,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutGroupsNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 'grp-1_itm-1'\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId\n    });\n  };\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\" theme=\"dark\">\n        <NavGroup title=\"System Panel\">\n          <NavItem itemId=\"grp-1_itm-1\" isActive={activeItem === 'grp-1_itm-1'}>\n            Overview\n          </NavItem>\n          <NavItem itemId=\"grp-1_itm-2\" isActive={activeItem === 'grp-1_itm-2'}>\n            Resource Usage\n          </NavItem>\n          <NavItem itemId=\"grp-1_itm-3\" isActive={activeItem === 'grp-1_itm-3'}>\n            Hypervisors\n          </NavItem>\n          <NavItem itemId=\"grp-1_itm-4\" isActive={activeItem === 'grp-1_itm-4'}>\n            Instances\n          </NavItem>\n          <NavItem itemId=\"grp-1_itm-5\" isActive={activeItem === 'grp-1_itm-5'}>\n            Volumes\n          </NavItem>\n          <NavItem itemId=\"grp-1_itm-6\" isActive={activeItem === 'grp-1_itm-6'}>\n            Network\n          </NavItem>\n        </NavGroup>\n        <NavGroup title=\"Policy\">\n          <NavItem itemId=\"grp-2_itm-1\" isActive={activeItem === 'grp-2_itm-1'}>\n            Hosts\n          </NavItem>\n          <NavItem itemId=\"grp-2_itm-2\" isActive={activeItem === 'grp-2_itm-2'}>\n            Virtual Machines\n          </NavItem>\n          <NavItem itemId=\"grp-2_itm-3\" isActive={activeItem === 'grp-2_itm-3'}>\n            Storage\n          </NavItem>\n        </NavGroup>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"groups-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"groups-example-uid-02\" aria-label=\"Setings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        showNavToggle\n      />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} theme=\"dark\" />;\n    const pageId = 'main-content-page-layout-group-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection variant={PageSectionVariants.light}>Light</PageSection>\n          <PageSection variant={PageSectionVariants.dark}>Dark</PageSection>\n          <PageSection variant={PageSectionVariants.darker}>Darker</PageSection>\n          <PageSection>Content</PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}",
      "position": {
        "start": {
          "line": 710,
          "column": 1,
          "offset": 21688
        },
        "end": {
          "line": 920,
          "column": 4,
          "offset": 28310
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Horizontal-nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  NavVariants,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutHorizontalNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId\n    });\n  };\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList variant={NavVariants.horizontal}>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"horizontal-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"horizontal-example-uid-02\" aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        topNav={PageNav}\n      />\n    );\n\n    const PageBreadcrumb = (\n      <Breadcrumb>\n        <BreadcrumbItem>Section Home</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section Title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\">Section Title</BreadcrumbItem>\n        <BreadcrumbItem to=\"#\" isActive>\n          Section Landing\n        </BreadcrumbItem>\n      </Breadcrumb>\n    );\n    const pageId = 'main-content-page-layout-horizontal-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page header={Header} skipToContent={PageSkipToContent} breadcrumb={PageBreadcrumb} mainContainerId={pageId}>\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery gutter=\"md\">\n              {Array.apply(0, Array(10)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}",
      "position": {
        "start": {
          "line": 922,
          "column": 1,
          "offset": 28312
        },
        "end": {
          "line": 1135,
          "column": 4,
          "offset": 34658
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Manual-nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutManualNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0,\n      isMobileView: false,\n      isNavOpenDesktop: true,\n      isNavOpenMobile: false\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId\n    });\n  };\n\n  onNavToggleDesktop = () => {\n    this.setState({\n      isNavOpenDesktop: !this.state.isNavOpenDesktop\n    });\n  };\n\n  onNavToggleMobile = () => {\n    this.setState({\n      isNavOpenMobile: !this.state.isNavOpenMobile\n    });\n  };\n\n  onPageResize = ({ mobileView, windowSize }) => {\n    this.setState({\n      isMobileView: mobileView\n    });\n  };\n\n  render() {\n    const {\n      isDropdownOpen,\n      isKebabDropdownOpen,\n      activeItem,\n      isNavOpenDesktop,\n      isNavOpenMobile,\n      isMobileView\n    } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\" theme=\"dark\">\n        <NavList>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"default-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"default-example-uid-02\" aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        showNavToggle\n        onNavToggle={isMobileView ? this.onNavToggleMobile : this.onNavToggleDesktop}\n        isNavOpen={isMobileView ? isNavOpenMobile : isNavOpenDesktop}\n      />\n    );\n    const Sidebar = (\n      <PageSidebar nav={PageNav} isNavOpen={isMobileView ? isNavOpenMobile : isNavOpenDesktop} theme=\"dark\" />\n    );\n    const pageId = 'main-content-page-layout-manual-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          onPageResize={this.onPageResize}\n          skipToContent={PageSkipToContent}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery gutter=\"md\">\n              {Array.apply(0, Array(10)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}",
      "position": {
        "start": {
          "line": 1137,
          "column": 1,
          "offset": 34660
        },
        "end": {
          "line": 1376,
          "column": 4,
          "offset": 41489
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    },
    {
      "type": "code",
      "lang": "js",
      "meta": "title=Legacy/Light Nav",
      "value": "import React from 'react';\nimport {\n  Avatar,\n  Brand,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n  DropdownSeparator,\n  Gallery,\n  GalleryItem,\n  KebabToggle,\n  Nav,\n  NavItem,\n  NavList,\n  NavVariants,\n  Page,\n  PageHeader,\n  PageSection,\n  PageSectionVariants,\n  PageSidebar,\n  SkipToContent,\n  TextContent,\n  Text,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem\n} from '@patternfly/react-core';\n// make sure you've installed @patternfly/patternfly\nimport accessibleStyles from '@patternfly/react-styles/css/utilities/Accessibility/accessibility';\nimport spacingStyles from '@patternfly/react-styles/css/utilities/Spacing/spacing';\nimport { css } from '@patternfly/react-styles';\nimport { BellIcon, CogIcon } from '@patternfly/react-icons';\nimport imgBrand from './imgBrand.png';\nimport imgAvatar from './imgAvatar.svg';\n\nclass PageLayoutLightNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      activeItem: 0\n    };\n  }\n\n  onDropdownToggle = isDropdownOpen => {\n    this.setState({\n      isDropdownOpen\n    });\n  };\n\n  onDropdownSelect = event => {\n    this.setState({\n      isDropdownOpen: !this.state.isDropdownOpen\n    });\n  };\n\n  onKebabDropdownToggle = isKebabDropdownOpen => {\n    this.setState({\n      isKebabDropdownOpen\n    });\n  };\n\n  onKebabDropdownSelect = event => {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen\n    });\n  };\n\n  onNavSelect = result => {\n    this.setState({\n      activeItem: result.itemId\n    });\n  };\n\n  render() {\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\n\n    const PageNav = (\n      <Nav onSelect={this.onNavSelect} aria-label=\"Nav\">\n        <NavList variant={NavVariants.simple}>\n          <NavItem itemId={0} isActive={activeItem === 0}>\n            System Panel\n          </NavItem>\n          <NavItem itemId={1} isActive={activeItem === 1}>\n            Policy\n          </NavItem>\n          <NavItem itemId={2} isActive={activeItem === 2}>\n            Authentication\n          </NavItem>\n          <NavItem itemId={3} isActive={activeItem === 3}>\n            Network Services\n          </NavItem>\n          <NavItem itemId={4} isActive={activeItem === 4}>\n            Server\n          </NavItem>\n        </NavList>\n      </Nav>\n    );\n    const kebabDropdownItems = [\n      <DropdownItem>\n        <BellIcon /> Notifications\n      </DropdownItem>,\n      <DropdownItem>\n        <CogIcon /> Settings\n      </DropdownItem>\n    ];\n    const userDropdownItems = [\n      <DropdownItem>Link</DropdownItem>,\n      <DropdownItem component=\"button\">Action</DropdownItem>,\n      <DropdownItem isDisabled>Disabled Link</DropdownItem>,\n      <DropdownItem isDisabled component=\"button\">\n        Disabled Action\n      </DropdownItem>,\n      <DropdownSeparator />,\n      <DropdownItem>Separated Link</DropdownItem>,\n      <DropdownItem component=\"button\">Separated Action</DropdownItem>\n    ];\n    const PageToolbar = (\n      <Toolbar>\n        <ToolbarGroup className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnLg)}>\n          <ToolbarItem>\n            <Button id=\"simple-example-uid-01\" aria-label=\"Notifications actions\" variant={ButtonVariant.plain}>\n              <BellIcon />\n            </Button>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Button id=\"simple-example-uid-02\" aria-label=\"Settings actions\" variant={ButtonVariant.plain}>\n              <CogIcon />\n            </Button>\n          </ToolbarItem>\n        </ToolbarGroup>\n        <ToolbarGroup>\n          <ToolbarItem className={css(accessibleStyles.hiddenOnLg, spacingStyles.mr_0)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onKebabDropdownSelect}\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\n              isOpen={isKebabDropdownOpen}\n              dropdownItems={kebabDropdownItems}\n            />\n          </ToolbarItem>\n          <ToolbarItem className={css(accessibleStyles.screenReader, accessibleStyles.visibleOnMd)}>\n            <Dropdown\n              isPlain\n              position=\"right\"\n              onSelect={this.onDropdownSelect}\n              isOpen={isDropdownOpen}\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>Kyle Baker</DropdownToggle>}\n              dropdownItems={userDropdownItems}\n            />\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n    );\n    const Header = (\n      <PageHeader\n        logo={<Brand src={imgBrand} alt=\"Patternfly Logo\" />}\n        toolbar={PageToolbar}\n        avatar={<Avatar src={imgAvatar} alt=\"Avatar image\" />}\n        showNavToggle\n      />\n    );\n    const Sidebar = <PageSidebar nav={PageNav} />;\n    const pageId = 'main-content-page-layout-simple-nav';\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to Content</SkipToContent>;\n\n    return (\n      <React.Fragment>\n        <Page\n          header={Header}\n          sidebar={Sidebar}\n          isManagedSidebar\n          skipToContent={PageSkipToContent}\n          mainContainerId={pageId}\n        >\n          <PageSection variant={PageSectionVariants.light}>\n            <TextContent>\n              <Text component=\"h1\">Main Title</Text>\n              <Text component=\"p\">\n                Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\n                of it’s relative line height of 1.5.\n              </Text>\n            </TextContent>\n          </PageSection>\n          <PageSection>\n            <Gallery gutter=\"md\">\n              {Array.apply(0, Array(10)).map((x, i) => (\n                <GalleryItem key={i}>\n                  <Card>\n                    <CardBody>This is a card</CardBody>\n                  </Card>\n                </GalleryItem>\n              ))}\n            </Gallery>\n          </PageSection>\n        </Page>\n      </React.Fragment>\n    );\n  }\n}\n``\n\n\nexport const _frontmatter = {\"title\":\"Page layout\",\"section\":\"demos\"}",
      "position": {
        "start": {
          "line": 1378,
          "column": 1,
          "offset": 41491
        },
        "end": {
          "line": 1588,
          "column": 70,
          "offset": 47638
        },
        "indent": [
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1
        ]
      }
    }
  ],
  "position": {
    "start": {
      "line": 1,
      "column": 1,
      "offset": 0
    },
    "end": {
      "line": 1588,
      "column": 70,
      "offset": 47638
    }
  }
}))